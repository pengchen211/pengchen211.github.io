<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2019-03-18T21:19:15+08:00</updated><id>/feed.xml</id><title type="html">彭晨的博客</title><subtitle>我的学习记录</subtitle><entry><title type="html">Redis-数据结构</title><link href="/redis/2019/03/18/redis-datastructure-and-object.html" rel="alternate" type="text/html" title="Redis-数据结构" /><published>2019-03-18T00:00:00+08:00</published><updated>2019-03-18T00:00:00+08:00</updated><id>/redis/2019/03/18/redis-datastructure-and-object</id><content type="html" xml:base="/redis/2019/03/18/redis-datastructure-and-object.html">&lt;h4 id=&quot;reference&quot;&gt;Reference&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;《Redis设计与实现》&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://1e-gallery.redisbook.com/index.html&quot;&gt;Redis设计与实现图片集&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;1-简单动态字符串simple-dynamic-string&quot;&gt;1 简单动态字符串(simple dynamic string)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct sdshdr {
   int len; // 字符串长度
   int free; // 空闲长度
   char buf[];
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;11-图示&quot;&gt;1.1 图示&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/redis-sds.png&quot; alt=&quot;sds&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;12-优点&quot;&gt;1.2 优点&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;快速获取字符串长度&lt;/li&gt;
  &lt;li&gt;避免缓冲区溢出&lt;/li&gt;
  &lt;li&gt;减少修改字符串带来的内存重分配次数
    &lt;blockquote&gt;
      &lt;p&gt;&lt;strong&gt;空间分配策略&lt;/strong&gt;&lt;/p&gt;
      &lt;ol&gt;
        &lt;li&gt;空间预分配
 对sds修改并需要扩展长度时，会按一定规则分配额外空间
          &lt;ul&gt;
            &lt;li&gt;长度修改后将小于1MB，则分配与len同样大小的free&lt;/li&gt;
            &lt;li&gt;将大于1MB，则分配1MB的free&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;惰性空间释放
 用于优化sds字符串缩短操作,当字符串缩短时，不会立即回收多于的内存，会将其作为free&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;二进制安全&lt;/li&gt;
  &lt;li&gt;兼容C语言字符串函数&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;2-链表&quot;&gt;2 链表&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;typedef struct listNode {
    struct listNode *prev;
    struct listNode *next;
    void *value;
} listNode;

typedef struct list {
    listNode *head;
    listNode *tail;
    void *(*dup)(void *ptr);// 节点值复制函数
    void (*free)(void *ptr);// 节点值释放函数
    int (*match)(void *ptr, void *key);// 节点值对比函数
    unsigned long len;
} list;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;21-图示&quot;&gt;2.1 图示&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/assets/redis-list.png&quot; alt=&quot;link&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-字典&quot;&gt;3 字典&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 哈希表
typedef struct dictht {
		// 哈希表数组
    dictEntry **table;// dictEntry
		// 哈希表大小
    unsigned long size;
		// 哈希表大小掩码，用于计算索引值
		// 总是size - 1，决定一个key映射到table数组哪个索引上
    unsigned long sizemask;
		// 哈希表已有节点的数量
    unsigned long used;
} dictht;

// 哈希表节点
typedef struct dictEntry {
    void *key;
    union {
        void *val;
        uint64_t u64;
        int64_t s64;
        double d;
    } v;
    struct dictEntry *next;// 用来解决hash冲突
} dictEntry;

// 字典
typedef struct dict {
    // 类型特定函数
    dictType *type;
    // 私有函数
    void *privdata;
    // 哈希表
    // 一般只会使用ht[0]，ht[1]在rehash时使用
    dictht ht[2];
		// rehash索引
    long rehashidx; /* rehashing not in progress if rehashidx == -1 */
    unsigned long iterators; /* number of iterators currently running */
} dict;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;31-图示&quot;&gt;3.1 图示&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/assets/redis-dictionary.png&quot; alt=&quot;dictionary&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;32-rehash&quot;&gt;3.2 rehash&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;集中式&lt;/li&gt;
  &lt;li&gt;渐进式
    &lt;blockquote&gt;
      &lt;ol&gt;
        &lt;li&gt;为ht[1]分配空间，字典同时持有2个hash表&lt;/li&gt;
        &lt;li&gt;字典中rehashindex置0&lt;/li&gt;
        &lt;li&gt;每次对字典crud，会同时将ht[0]上rehashindex索引上的所有键值对rehash到ht[1],并rehashindex++&lt;/li&gt;
        &lt;li&gt;完成后，rehashindex置-1&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;4-跳跃表skiplist&quot;&gt;4 跳跃表(skiplist)&lt;/h3&gt;</content><author><name></name></author><summary type="html">Reference 《Redis设计与实现》 Redis设计与实现图片集</summary></entry><entry><title type="html">Redis-概要</title><link href="/redis/2019/03/17/redis-summary.html" rel="alternate" type="text/html" title="Redis-概要" /><published>2019-03-17T00:00:00+08:00</published><updated>2019-03-17T00:00:00+08:00</updated><id>/redis/2019/03/17/redis-summary</id><content type="html" xml:base="/redis/2019/03/17/redis-summary.html">&lt;h3 id=&quot;1思维导图&quot;&gt;1.思维导图&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;待完善&lt;/strong&gt;
&lt;img src=&quot;/assets/redis-xmind.png&quot; alt=&quot;xmind&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">1.思维导图 待完善</summary></entry></feed>